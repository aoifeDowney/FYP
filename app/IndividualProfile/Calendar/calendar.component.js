"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var app = require("application");
var color_1 = require("color");
var nativescript_ui_calendar_1 = require("nativescript-ui-calendar");
var calendarModule = require("nativescript-ui-calendar");
var transactions_service_1 = require("../../shared/transactions/transactions.service");
var CalendarComponent = /** @class */ (function () {
    function CalendarComponent(transactionsService) {
        this.transactionsService = transactionsService;
        this.transactions = [];
        this.calendarEvents = [];
        this.payments = [];
        this.dates = [];
        this.date = [];
        this.names = [];
        this.name = [];
    }
    CalendarComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.transactionsService.get().subscribe(function (data) {
            _this.dates.push(data);
            _this.names.push(data);
            for (var i = 0; i < _this.dates.length; i++) {
                _this.date.push(_this.dates[0][i]["date"]);
                _this.name.push(_this.names[0][i]["name"]);
                console.log("NAME: " + _this.name[i]);
            }
            var events = [];
            var startDate;
            var endDate;
            var colors = [new color_1.Color(200, 188, 26, 214), new color_1.Color(220, 255, 109, 130), new color_1.Color(255, 55, 45, 255), new color_1.Color(199, 17, 227, 10), new color_1.Color(255, 255, 54, 3)];
            for (var i = 1; i < _this.name.length; i++) {
                startDate = new Date(_this.date[i]);
                endDate = new Date(_this.date[i]);
                var event_1 = new calendarModule.CalendarEvent(_this.name[i], startDate, endDate, false, colors[2 * 10 % (colors.length - 1)]);
                events.push(event_1);
                if (2 % 3 == 0) {
                    event_1 = new calendarModule.CalendarEvent(_this.name[i], startDate, endDate, true, colors[2 * 5 % (colors.length - 1)]);
                    events.push(event_1);
                }
                _this.calendarEvents = events;
            }
        }, function () {
            alert({
                title: "Transactions",
                message: "An error occurred retrieving your data"
            });
        });
    };
    CalendarComponent.prototype.getItemDetail = function (date) {
        this.itemDate = date;
        return this.itemDate;
    };
    CalendarComponent.prototype.monthViewStyle = function () {
        var monthViewStyle = new nativescript_ui_calendar_1.CalendarMonthViewStyle();
        monthViewStyle.backgroundColor = new color_1.Color('rgb(255, 255, 255)');
        monthViewStyle.selectionShapeColor = new color_1.Color('rgb(0, 0, 0)');
        var todayCellStyle = new nativescript_ui_calendar_1.DayCellStyle();
        todayCellStyle.cellBackgroundColor = new color_1.Color('rgb(198, 182, 251)');
        todayCellStyle.cellTextColor = new color_1.Color('rgb(112, 0, 203)');
        monthViewStyle.todayCellStyle = todayCellStyle;
        var dayCellStyle = new nativescript_ui_calendar_1.DayCellStyle();
        dayCellStyle.cellBackgroundColor = new color_1.Color('rgb(255, 255, 255)');
        dayCellStyle.cellBorderWidth = 1;
        dayCellStyle.cellBorderColor = new color_1.Color('rgb(255, 255, 255)');
        dayCellStyle.cellTextColor = new color_1.Color('rgb(155, 126, 248)');
        monthViewStyle.dayCellStyle = dayCellStyle;
        var weekendCellStyle = new nativescript_ui_calendar_1.DayCellStyle();
        monthViewStyle.weekendCellStyle = weekendCellStyle;
        var selectedCellStyle = new nativescript_ui_calendar_1.DayCellStyle();
        monthViewStyle.selectedDayCellStyle = selectedCellStyle;
        var dayNameCellStyle = new nativescript_ui_calendar_1.CellStyle();
        dayNameCellStyle.cellBackgroundColor = new color_1.Color('rgb(255, 255, 255)');
        dayNameCellStyle.cellBorderWidth = 1;
        dayNameCellStyle.cellBorderColor = new color_1.Color('rgb(255, 255, 255)');
        dayNameCellStyle.cellTextColor = new color_1.Color('rgb(112, 0, 203)');
        monthViewStyle.dayNameCellStyle = dayNameCellStyle;
        var titleCellStyle = new nativescript_ui_calendar_1.DayCellStyle();
        titleCellStyle.cellBackgroundColor = new color_1.Color('rgb(255, 255, 255)');
        titleCellStyle.cellBorderWidth = 1;
        titleCellStyle.cellBorderColor = new color_1.Color('rgb(255, 255, 255)');
        titleCellStyle.cellTextColor = new color_1.Color('rgb(112, 0, 203)');
        monthViewStyle.titleCellStyle = titleCellStyle;
        return monthViewStyle;
    };
    CalendarComponent.prototype.onDrawerButtonTap = function () {
        var sideDrawer = app.getRootView();
        sideDrawer.showDrawer();
    };
    CalendarComponent = __decorate([
        core_1.Component({
            selector: "gr-calendar",
            templateUrl: "./calendar.component.html",
            styleUrls: ["./calendar.component.css"],
            providers: [transactions_service_1.TransactionsService]
        }),
        __metadata("design:paramtypes", [transactions_service_1.TransactionsService])
    ], CalendarComponent);
    return CalendarComponent;
}());
exports.CalendarComponent = CalendarComponent;
//# sourceMappingURL=data:application/json;base64,